/* THE FOLLOWING CSS FILE MAKES THE TABLE LOOK LIKE THE BACKGROUND WE WANT... */

.background
{
    background: rgb(52, 166, 251);
    table-layout: fixed;
    border-spacing: 0;
}

.background td
{
    padding: 0;
}

.lava
{
    background: rgb(255, 150, 0);
}

.wall
{
    background: grey;
}

/* TO GIVE AN ELEMENT MORE THAN ONE CLASS, WE SEPARATE THE CLASS NAMES BY SPACES. IN THE FOLLOWING CSS CODE, THE "actor" CLASS GIVES THE ACTORS THEIR ABSOLUTE POSITION. THEIR TYPE NAME IS USED AS AN EXTRA CLASS TO GIVE THEM A COLOR. WE DON'T HAVE TO DEFINE THE "lava" CLASS AGAIN BECAUSE WE'RE RE-USING THE CLASS FOR THE LAVA GRID SQUARES WE DEFINED EARLIER... */

.actor
{
    position: absolute;
}

.coin
{
    background: rgb(241, 178, 0);
}

.player
{
    background: rgb(64, 64, 64);
}

/* By adding the level’s current status as a class name to the wrapper, we can style the player actor slightly differently when the game is won or lost by adding a CSS rule that takes effect only when the player has an ancestor element with a given class. */

.lost .player
{
    background: rgb(255, 0, 0);
}

.won .player
{
    box-shadow: -4px -7px 8px white, -4px -7px 8px white;
}

/* The following CSS gives the game’s wrapping DOM element a maximum size and ensures that anything that sticks out of the element’s box is not visible. We also give it a relative position so that the actors inside it are positioned relative to the level’s upper-left corner. */

.game
{
    overflow: hidden;
    max-width: 600px;
    max-height: 450px;
    position: relative;
}
